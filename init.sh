#!/bin/sh
# the next line restarts using tclsh \
exec tclsh "$0" ${1+"$@"}

set db_app_version 1.0

package require sqlite3

# Save the original one so we can chain to it:
rename unknown _original_unknown

# tcl command name for sqlite3
set db "db"
set sqlite_args [list $db app.db -create true]
sqlite3 {*}$sqlite_args
$db enable_load_extension true
$db eval { SELECT load_extension("ulid"); }

# Provide own implementation:
proc unknown args {
  set name [lindex $args 0]
  set arguments [lindex $args 1]
  #puts $args
  if {![::db_app::has_procedure $name]} {
    ::db_app::insert_example_procedures
    # puts stderr "No ::main procedure in db."
    # exit 1
  }
  ::db_app::load_procedure $name
  eval $name $arguments
}

#
# db_app namespace START
#
namespace eval ::db_app {
  # initialised tcl command generated by sqlite3 to execute db stuff:
  variable db $db
  namespace export select_procedure
  namespace export has_procedure
  namespace export load_procedure
  namespace export create_procedures_table
  namespace export insert_example_procedures
}

proc ::db_app::select_procedure {name} {
  variable db
  # Select latest (id) procedure.
  # The id is ulid type.
  set sql "
    SELECT id, name, arguments, body
    FROM procedures WHERE name LIKE '$name'
    ORDER BY id DESC
    LIMIT 1
    ;
  "
  set result [$db eval $sql]
  return $result
}

proc ::db_app::has_procedure {name} {
  variable db
  set sql "
    SELECT id, name, arguments, body
    FROM procedures WHERE name LIKE '$name';
  "
  return [db exists $sql]
}

proc ::db_app::load_procedure {name} {
  set result [::db_app::select_procedure $name]
  set arguments [lindex $result 2]
  set body [lindex $result 3]
  proc $name $arguments $body
}

proc ::db_app::create_procedures_table {} {
  variable db
  $db eval {CREATE TABLE IF NOT EXISTS "procedures" (
    -- used also as revision:
    "id"    TEXT NOT NULL DEFAULT (ulid()) UNIQUE,
    "name"  TEXT NOT NULL,
    "arguments"  TEXT,
    "body"  TEXT,
    PRIMARY KEY("id"));
  }
}

proc ::db_app::insert_example_procedures {} {
  variable db
  set main_body {
    ::hello $name
  }
  set hello_body {
    puts "Hello $name!"
  }
  set main_arguments {name}
  set hello_arguments {name}
  $db eval {
    INSERT INTO procedures (name, arguments, body) VALUES ('::main', $main_arguments, $main_body);
    INSERT INTO procedures (name, arguments, body) VALUES ('::hello', $hello_arguments, $hello_body);
  }
}

package provide db_app $db_app_version

#
# db_app namespace END
#

proc init {name} {
  # defined inside this file:
  ::db_app::create_procedures_table
  # defined in sqlite db:
  ::main $name
}

set name [lindex $argv 0]
if {[llength $argv] == 0} { set name "World" }

init $name