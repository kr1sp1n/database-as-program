package require sqlite3

# tcl command name for sqlite3
set db "db"
set sqlite_args [list $db app.db -create true]
sqlite3 {*}$sqlite_args
$db enable_load_extension true
$db eval { SELECT load_extension("ulid"); }
$db eval { SELECT load_extension("shathree"); }

#
# db_app namespace START
#

namespace eval ::db_app {
  # initialised tcl command generated by sqlite3 to execute db stuff:
  variable db "db"
  variable version 1.0.0
  namespace export select_procedure
  namespace export has_procedure
  namespace export load_procedure
  namespace export create_procedures_table
  namespace export insert_example_procedures
  namespace export update_procedure
  namespace export load_package
  namespace export sha3
  namespace export sha3_compare
}

proc ::db_app::all_procedures {} {
  variable db
  set sql "
    SELECT *
    FROM procedures
    ORDER BY id DESC
    ;
  "
  set result {}
  $db eval $sql values {
    set row {}
    foreach val $values(*) {
      lappend row $values($val)
    }
    lappend result $row
  }
  return $result 
}

proc ::db_app::select_procedure {name} {
  variable db
  # Select latest (id) procedure.
  # The id is ulid type.
  set sql "
    SELECT id, name, arguments, body
    FROM procedures WHERE name LIKE '$name'
    ORDER BY id DESC
    LIMIT 1
    ;
  "
  set result [$db eval $sql]
  return $result
}

proc ::db_app::has_procedure {name} {
  variable db
  set sql "
    SELECT id, name, arguments, body
    FROM procedures WHERE name LIKE '$name';
  "
  return [db exists $sql]
}

proc ::db_app::procedure {id} {
  variable db
  set sql "
    SELECT id, name, arguments, body
    FROM procedures WHERE id LIKE '$id'
    LIMIT 1
    ;
  "
  set result [$db eval $sql]
  return $result
}

proc ::db_app::update_procedure {id name arguments body} {
  variable db
  set sql {UPDATE procedures SET name=:name, arguments=:arguments, body=:body WHERE id LIKE :id}
  set stmt [format $sql]
  set result [$db eval $stmt]
  return $result
}

proc ::db_app::load_procedure {name} {
  set result [::db_app::select_procedure $name]
  set arguments [lindex $result 2]
  set body [lindex $result 3]
  proc $name $arguments $body
}

proc ::db_app::create_procedures_table {} {
  variable db
  $db eval {CREATE TABLE IF NOT EXISTS "procedures" (
    -- used also as revision:
    "id"    TEXT NOT NULL DEFAULT (ulid()) UNIQUE,
    "name"  TEXT NOT NULL,
    "arguments"  TEXT,
    "body"  TEXT,
    PRIMARY KEY("id"));
  }
}

proc ::db_app::insert_example_procedures {} {
  variable db
  set main_body {::hello $name}
  set hello_body {puts "Hello $name!"}
  set main_arguments {name}
  set hello_arguments {name}
  $db eval {
    INSERT INTO procedures (name, arguments, body) VALUES ('::main', $main_arguments, $main_body);
    INSERT INTO procedures (name, arguments, body) VALUES ('::hello', $hello_arguments, $hello_body);
  }
}

proc ::db_app::sha3 {value} {
  variable db
  set sql "SELECT hex(sha3(:value,224));"
  set stmt [format $sql]
  set result [$db eval $stmt]
  return $result
}

# Calculate SHA3 sum:
proc ::db_app::sha3_compare {value1 value2} {
  set result1 [::db_app::sha3 $value1]
  set result2 [::db_app::sha3 $value2]
  return [expr {$result1 == $result2}]
}

package provide db_app $::db_app::version

#
# db_app namespace END
#